{"version":3,"sources":["components/layout/Navbar.js","components/projects/ProjectListItem.js","components/projects/ProjectList.js","components/dashboard/Dashboard.js","components/projects/Project.js","App.js","serviceWorker.js","store/reducers/authReducer.js","store/reducers/projectReducer.js","store/reducers/rootReducer.js","index.js"],"names":["Navbar","to","ProjectListItem","project","className","title","shortDescription","date","ProjectList","projects","id","map","key","Dashboard","this","props","Component","connect","state","projectReducer","Project","match","params","App","exact","path","component","Boolean","window","location","hostname","initState","authReducer","rootReducer","combineReducers","store","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qPAGe,SAASA,IACtB,OACE,6BACE,kBAAC,IAAD,CAASC,GAAG,KAAI,0C,oCCMPC,MAVf,YAAqC,IAAXC,EAAU,EAAVA,QACxB,OACE,6BAASC,UAAU,gBACf,wBAAIA,UAAU,sBAAsBD,EAAQE,OAC5C,uBAAGD,UAAU,4BAA4BD,EAAQG,kBACjD,uBAAGF,UAAU,qBAAqBD,EAAQI,QCMnCC,MAVf,YAAkC,IAAZC,EAAW,EAAXA,SACpB,OACE,6BAASC,GAAG,gBACTD,GAAYA,EAASE,KAAI,SAAAR,GACxB,OAAO,kBAAC,EAAD,CAAiBA,QAASA,EAAUS,IAAKT,EAAQE,a,QCH1DQ,E,uKACM,IACAJ,EAAaK,KAAKC,MAAlBN,SACR,OACE,yBAAKC,GAAG,aACN,kBAAC,EAAD,CAAaD,SAAUA,S,GALPO,aAoBTC,eANS,SAACC,GACvB,MAAO,CACLT,SAAUS,EAAMC,eAAeV,YAIpBQ,CAAyBJ,GCZzBO,MAVf,SAAiBL,GACf,OACE,6BAASL,GAAG,WACR,wBAAIN,UAAU,iBAAd,UAAsCW,EAAMM,MAAMC,OAAOZ,IACzD,uBAAGN,UAAU,uBAAb,kDACA,uBAAGA,UAAU,gBAAb,wBCaOmB,MAdf,WACE,OACE,kBAAC,IAAD,KACE,yBAAKnB,UAAU,OACb,kBAACJ,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOwB,OAAK,EAACC,KAAK,IAAIC,UAAWb,IACjC,kBAAC,IAAD,CAAOY,KAAK,eAAeC,UAAWN,QCD5BO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAST,MACvB,2D,WClBAU,EAAY,GAMHC,EAJK,WAAgC,IAA/Bd,EAA8B,uDAAtBa,EAAsB,iCACjD,OAAOb,GCHHa,EAAY,CAChBtB,SAAU,CACR,CAACJ,MAAO,SAAUE,KAAK,qBAAsBD,iBAAiB,kDAC9D,CAACD,MAAO,aAAcE,KAAK,uBAAwBD,iBAAiB,+BACpE,CAACD,MAAO,YAAaE,KAAK,qBAAsBD,iBAAiB,+BAQtDa,EAJQ,WAAgC,IAA/BD,EAA8B,uDAAtBa,EAAsB,iCACpD,OAAOb,GCAMe,EALKC,YAAgB,CAClCF,cACAb,mBCGIgB,EAAQC,YAAYH,GAE1BI,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUJ,MAAOA,GACf,kBAAC,EAAD,QAGJK,SAASC,eAAe,SJkHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.cc152475.chunk.js","sourcesContent":["import React from 'react'\nimport { NavLink } from 'react-router-dom';\n\nexport default function Navbar() {\n  return (\n    <nav>\n      <NavLink to='/'><h1>Eric Kim</h1></NavLink>\n    </nav>\n  )\n}\n","import React from 'react'\n\nfunction ProjectListItem({project}) {\n  return (\n    <article className='project-item'>\n        <h2 className='project-item-title'>{project.title}</h2>\n        <p className='project-item-description'>{project.shortDescription}</p>\n        <p className='project-item-date'>{project.date}</p>\n    </article>\n  )\n}\n\nexport default ProjectListItem;","import React from 'react'\nimport ProjectListItem from './ProjectListItem';\n\nfunction ProjectList({projects}) {\n  return (\n    <section id='project-list'>\n      {projects && projects.map(project => {\n        return <ProjectListItem project={project}  key={project.title}/>\n      })}\n    </section>\n  )\n}\n\nexport default ProjectList;","import React, { Component } from 'react'\nimport ProjectList from '../projects/ProjectList';\nimport { connect } from 'react-redux';\n\nclass Dashboard extends Component {\n  render() {\n    const { projects } = this.props;\n    return (\n      <div id='dashboard'>\n        <ProjectList projects={projects} />\n      </div>\n    )\n  }\n}\n\n// Mapping the state the new wrapper component will subscribe to Redux store updates. \n// This means that any time the store is updated, mapStateToProps will be called. \n// The results of mapStateToProps must be a plain object, which will be merged into the wrapped componentâ€™s props.\nconst mapStateToProps = (state) => {\n  return {\n    projects: state.projectReducer.projects\n  }\n}\n\nexport default connect(mapStateToProps)(Dashboard);","import React from 'react'\n\nfunction Project(props) {\n  return (\n    <section id='project'>\n        <h2 className='project-title'>Vocaby {props.match.params.id}</h2>\n        <p className='project-description'>A Vocabulary Building Google Extension Project</p>\n        <p className='project-date'>Jan 2020 - Present</p>\n    </section>\n  )\n}\n\nexport default Project;","import React from 'react';\nimport { BrowserRouter, Switch, Route} from 'react-router-dom';\nimport Navbar from './components/layout/Navbar';\nimport Dashboard from './components/dashboard/Dashboard';\nimport Project from './components/projects/Project';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n        <Navbar />\n        <Switch>\n          <Route exact path='/' component={Dashboard} />\n          <Route path='/project/:id' component={Project} />\n        </Switch>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initState = {};\n\nconst authReducer = (state = initState, action) => {\n  return state;\n}\n\nexport default authReducer;","const initState = {\n  projects: [\n    {title: 'Vocaby', date:'Jan 2020 - Present', shortDescription:'A Vocabulary Building Google Extension Project'},\n    {title: 'UW Leaders', date:'April 2020 - Present', shortDescription:'Official UW Leaders Website'},\n    {title: 'Collewear', date:'May 2020 - Present', shortDescription:'Fashion Items Web Scraper'}\n  ]\n};\n\nconst projectReducer = (state = initState, action) => {\n  return state;\n}\n\nexport default projectReducer;","import authReducer from './authReducer';\nimport projectReducer from './projectReducer';\nimport { combineReducers } from 'redux';\n\nconst rootReducer = combineReducers({\n  authReducer,\n  projectReducer\n});\n\nexport default rootReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux';\nimport rootReducer from './store/reducers/rootReducer';\nimport { Provider } from 'react-redux';\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}